version: '3.8'

services:
  # === INFRASTRUCTURE SERVICES ===
  
  # --- MongoDB Database ---
  mongo:
    image: mongo:6
    container_name: ecommerce-mongo-prod
    restart: always
    volumes:
      - mongo-data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=ecommerce
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # --- NATS Streaming ---
  nats:
    image: nats-streaming:latest
    container_name: ecommerce-nats-prod
    restart: always
    command: ["-p", "4222", "-m", "8222", "--cluster_id", "prod-cluster"]
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8222"]
      interval: 30s
      timeout: 10s
      retries: 3

  # --- Redis Cache ---
  redis:
    image: redis:7-alpine
    container_name: ecommerce-redis-prod
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - ecommerce-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # === MICROSERVICES ===
  
  # --- Expiration Service ---
  expiration-service:
    build:
      context: ./expiration
      dockerfile: Dockerfile.prod
    container_name: ecommerce-expiration-prod
    restart: always
    environment:
      - NODE_ENV=production
      - PORT=3006
      - NATS_CLUSTER_ID=${NATS_CLUSTER_ID}
      - NATS_CLIENT_ID=${NATS_CLIENT_ID}_expiration
      - NATS_URL=nats://nats:4222
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - ecommerce-network
    depends_on:
      nats:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # --- User Service ---
  user-service:
    build:
      context: ./user
      dockerfile: Dockerfile.prod
    container_name: ecommerce-user-prod
    restart: always
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGO_URI_USER=${MONGO_URI_USER}
      - JWT_KEY=${JWT_KEY}
      - NATS_CLUSTER_ID=${NATS_CLUSTER_ID}
      - NATS_CLIENT_ID=${NATS_CLIENT_ID}_user
      - NATS_URL=nats://nats:4222
    networks:
      - ecommerce-network
    depends_on:
      mongo:
        condition: service_healthy
      nats:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # --- Product Service ---
  product-service:
    build:
      context: ./product
      dockerfile: Dockerfile.prod
    container_name: ecommerce-product-prod
    restart: always
    environment:
      - NODE_ENV=production
      - PORT=3001
      - MONGO_URI_PRODUCT=${MONGO_URI_PRODUCT}
      - NATS_CLUSTER_ID=${NATS_CLUSTER_ID}
      - NATS_CLIENT_ID=${NATS_CLIENT_ID}_product
      - NATS_URL=nats://nats:4222
      - JWT_KEY=${JWT_KEY}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
    networks:
      - ecommerce-network
    depends_on:
      mongo:
        condition: service_healthy
      nats:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # --- Order Service ---
  order-service:
    build:
      context: ./order
      dockerfile: Dockerfile.prod
    container_name: ecommerce-order-prod
    restart: always
    environment:
      - NODE_ENV=production
      - PORT=3002
      - MONGO_URI_ORDER=${MONGO_URI_ORDER}
      - NATS_CLUSTER_ID=${NATS_CLUSTER_ID}
      - NATS_CLIENT_ID=${NATS_CLIENT_ID}_order
      - NATS_URL=nats://nats:4222
      - JWT_KEY=${JWT_KEY}
    networks:
      - ecommerce-network
    depends_on:
      mongo:
        condition: service_healthy
      nats:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # --- Payment Service ---
  payment-service:
    build:
      context: ./payment
      dockerfile: Dockerfile.prod
    container_name: ecommerce-payment-prod
    restart: always
    environment:
      - NODE_ENV=production
      - PORT=3003
      - MONGO_URI_PAYMENT=${MONGO_URI_PAYMENT}
      - NATS_CLUSTER_ID=${NATS_CLUSTER_ID}
      - NATS_CLIENT_ID=${NATS_CLIENT_ID}_payment
      - NATS_URL=nats://nats:4222
      - JWT_KEY=${JWT_KEY}
      - VNPAY_TMN_CODE=${VNPAY_TMN_CODE}
      - VNPAY_HASH_SECRET=${VNPAY_HASH_SECRET}
      - VNPAY_URL=${VNPAY_URL}
      - VNPAY_RETURN_URL=${VNPAY_RETURN_URL}
      - CLIENT_URL=${CLIENT_URL}
    networks:
      - ecommerce-network
    depends_on:
      mongo:
        condition: service_healthy
      nats:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # === API GATEWAY ===
  
  # --- API Gateway ---
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile.prod
    container_name: ecommerce-gateway-prod
    restart: always
    environment:
      - NODE_ENV=production
      - PORT=4000
      - USER_SERVICE_URL=http://user-service:3000
      - PRODUCT_SERVICE_URL=http://product-service:3001
      - ORDER_SERVICE_URL=http://order-service:3002
      - PAYMENT_SERVICE_URL=http://payment-service:3003
    ports:
      - "${API_GATEWAY_EXTERNAL_PORT:-80}:4000"
    networks:
      - ecommerce-network
    depends_on:
      user-service:
        condition: service_started
      product-service:
        condition: service_started
      order-service:
        condition: service_started
      payment-service:
        condition: service_started
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # === FRONTEND (Optional for production) ===
  
  # --- React Frontend ---
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
      args:
        - REACT_APP_API_URL=${REACT_APP_API_URL}
        - REACT_APP_VNPAY_RETURN_URL=${REACT_APP_VNPAY_RETURN_URL}
    container_name: ecommerce-frontend-prod
    restart: always
    ports:
      - "${FRONTEND_EXTERNAL_PORT:-3000}:80"
    networks:
      - ecommerce-network
    depends_on:
      - api-gateway
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

volumes:
  mongo-data:
    driver: local
  redis-data:
    driver: local

networks:
  ecommerce-network:
    driver: bridge
