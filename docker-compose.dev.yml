version: '3.8'

services:
  # --- CSDL MongoDB ---
  mongo:
    image: mongo:6
    restart: unless-stopped
    volumes:
      - mongo-data:/data/db
    ports:
      - "27017:27017"

  # --- NATS Streaming ---
  nats:
    image: nats-streaming:latest
    restart: unless-stopped
    command: ["-cid", "test-cluster"]
    ports:
      - "4222:4222"
      - "8222:8222"

  # --- Redis ---
  redis:
    image: redis:latest
    restart: unless-stopped
    ports:
      - "6379:6379"

  # --- Expiration Service ---
  expiration-service:
    build:
      context: ./expiration
      dockerfile: Dockerfile
    command: npm run start
    environment:
      - NATS_CLUSTER_ID=${NATS_CLUSTER_ID}
      - NATS_CLIENT_ID=${NATS_CLIENT_ID}_expiration
      - NATS_URL=${NATS_URL}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      nats:
        condition: service_started
      redis:
        condition: service_started

  # --- User Service ---
  user-service:
    build:
      context: ./user
      dockerfile: Dockerfile
    command: npm run start
    environment:
      - PORT=3000
      - MONGO_URI_USER=${MONGO_URI_USER}
      - JWT_KEY=${JWT_KEY}
      - NATS_CLUSTER_ID=${NATS_CLUSTER_ID}
      - NATS_CLIENT_ID=${NATS_CLIENT_ID}_user
      - NATS_URL=${NATS_URL}
    ports:
      - "3000:3000"
    depends_on:
      - mongo
      - nats

  # --- Product Service ---
  product-service:
    build:
      context: ./product
      dockerfile: Dockerfile
    command: npm run start
    environment:
      - PORT=3001
      - MONGO_URI_PRODUCT=${MONGO_URI_PRODUCT}
      - NATS_CLUSTER_ID=${NATS_CLUSTER_ID}
      - NATS_CLIENT_ID=${NATS_CLIENT_ID}_product
      - NATS_URL=${NATS_URL}
      - JWT_KEY=${JWT_KEY}
    ports:
      - "3001:3000"
    depends_on:
      mongo:
        condition: service_started
      nats:
        condition: service_started

  # --- Order Service ---
  order-service:
    build:
      context: ./order
      dockerfile: Dockerfile
    command: npm run start
    environment:
      - PORT=3002
      - MONGO_URI_ORDER=${MONGO_URI_ORDER}
      - NATS_CLUSTER_ID=${NATS_CLUSTER_ID}
      - NATS_CLIENT_ID=${NATS_CLIENT_ID}_order
      - NATS_URL=${NATS_URL}
      - JWT_KEY=${JWT_KEY}
    ports:
      - "3002:3000"
    depends_on:
      mongo:
        condition: service_started
      nats:
        condition: service_started

  # --- Payment Service ---
  payment-service:
    build:
      context: ./payment
      dockerfile: Dockerfile
    command: npm run start
    environment:
      - PORT=3003
      - MONGO_URI_PAYMENT=${MONGO_URI_PAYMENT}
      - NATS_CLUSTER_ID=${NATS_CLUSTER_ID}
      - NATS_CLIENT_ID=${NATS_CLIENT_ID}_payment
      - NATS_URL=${NATS_URL}
      - JWT_KEY=${JWT_KEY}
      - VNPAY_TMN_CODE=${VNPAY_TMN_CODE}
      - VNPAY_HASH_SECRET=${VNPAY_HASH_SECRET}
      - VNPAY_URL=${VNPAY_URL}
      - VNPAY_RETURN_URL=${VNPAY_RETURN_URL}
      - CLIENT_URL=${CLIENT_URL}
    ports:
      - "3003:3000"
    depends_on:
      mongo:
        condition: service_started
      nats:
        condition: service_started

  # --- API Gateway ---
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    command: npm run start
    environment:
      - PORT=4000
      - USER_SERVICE_URL=http://user-service:3000
      - PRODUCT_SERVICE_URL=http://product-service:3000
      - ORDER_SERVICE_URL=http://order-service:3000
      - PAYMENT_SERVICE_URL=http://payment-service:3000
      - FRONTEND_URL=http://frontend:3000
    ports:
      - "4000:4000"
    depends_on:
      - user-service
      - product-service
      - order-service
      - payment-service

  # --- Frontend ---
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    command: npm start
    environment:
      - REACT_APP_API_URL=http://localhost:4000
      - REACT_APP_VNPAY_RETURN_URL=http://localhost:3005/payment/return
      - CHOKIDAR_USEPOLLING=true
      - PROXY_HOST=api-gateway
      - PROXY_PORT=4000
    ports:
      - "3005:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - api-gateway

volumes:
  mongo-data:
